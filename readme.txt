Version updates:

Improvements:
1. The new version of the code uses matlab struct (similar to dictionary) instead of matrix indexing. The readability of the code is much better and there is no need for the initEnv.m file for setting the global indexing variables.
2. Rewrote the dynamic grid algorithm, which is now cleaner.
3. Re-derived the theory. The entropic conditions are now documented in pdf. 
4. Added junction types onrampjunc, and offrampjunc, where onramp and offramps are controllable.
4. All array are defined as column vectors. 
5. Re-name functions and variables to make the code more readable and more precise, such as entropicSolutionAtJunc, sendingFuncAtLink, findBoundaryIntersection.
6. The original setIneqConstraints was developed in Java where index starts from 0 which is confusing in MATLAB. Modified all indexing in matlab which now starts from 1.


Details:
1. initNetwork. We no longer assume even discretization of the space. The input to setInitialCon is now a struct with fields: IC, X_grid_cum.
2. changed the INDEX_UP and INDEX_DOWN to struct (linkStr).upstream; (linkStr).downstream
3. Added a samplePoint function which only compute the vehicle id at points.
4. Added extractDensity function, which can be used to extract the density estimate at certain time.
5. In postSolution. If t_interval is shorter than dt_tol, return the middle point as the approximated found intersection point.
6. Added several functions for extracting the traffic density at any time, including searchFuncSlope, searchShocksOnLine, extractDensity.
7. Added utility functions such as groupSameElement to class.
8. Debugged the current control toolbox is working for estimation.
9. Changed the variable names in setIneqConstraints to more intuitive names.
10. Added an errors structure which supports different levels of error for each type of measurement.
11. Enabled internal and density conditions
12. When converting min(s1, s2) to linear constraints by adding bools variables, we used C=500000 which we thought was large enough. Now we used inf directly.
13. Added clear description on internal and density conditions in setIneqConstraints class
14. Updated dv_index structure which now supports internal, density, and bool variables.

- Sep 22
15. AIMSUN ramp metering has different control parameters. The simplest way is to set the flow (veh/hr) and AIMSUN will automatically approximate it.
16. Wrote a simple unit conversion function between (miles/hr, veh/hr, veh/mile) — (kph, veh/hr, veh/km) — (m/s, veh/s, veh/m). All units used internally in MATLAB are (m/s, veh/s, veh/m) including the FD parameters. The data file are all in more readable forms (miles/hr, veh/hr, veh/mile).
17. AIMSUN API has been finished and debugged.

- Sep 24
18. Added the queue threshold in the onramp. But this works only for the problem without internal and density conditions
19. Wrote a short python file to process the historical data to desired format which can be read by MATLAB. The historical data was generated by AIMSUN which is the average of 10 replications.



- Oct 21
20. If no data, then MATLAB just auto discretizes the time and space, and then simulate.
21. updateDiscretization T_junc should contain the fixed boundary discretization in the past period and the updated boundary grid in the predicted period
20. Build a link index in setineqConstraints for better tracking the position of each decision variable.
21. Added a soft queue limit constraints.

Todo:
- auto logging with time stamps

Issues:
- The upper and lower bound for internal and density decision variables are set as -inf and inf. To investigate a little bit more to learn a realistic range.
- We have not defined an offramp actuator yet. We use a green red cycle ramp meter for onramp control.
- In find slope functions, if the interval is too small, the functions just return NaN which will introduce an error. Fix by computing an approximated slope.
- The queue threshold only works for problems without internal and density conditions. Otherwise we have to introduce boolean variables.


